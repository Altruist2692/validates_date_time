= validates_date_time =

This plugin gives ActiveRecord the ability to do stricter date and time checking.
I use this plugin to validate text fields in which the user can enter either a time or a date.

Example:
 
  class Person < ActiveRecord::Base
    validates_date :date_of_birth
    validates_time :time_of_birth
  end
  
Install with:
 
  script/plugin install http://svn.viney.net.nz/things/rails/plugins/validates_date_time 

 
Check it's all working with:
 
  rake test:plugins [or rake test_plugins if you are using Rails 1.0]


Explanation
--

The Person class definition above will ensure that date_of_birth is a valid date and time_of_birth is a valid time.

The date can be set initially as a string in of the following formats:
 
  "2006-01-01"
  "1 Jan 06", or "1 Jan 2006"
  "1/1/06", "1/1/2006", "1\1\06", or "1\1\2006"  # Day / Month / Year
  

The time can be set initially as a string in the following formats:

  "1pm"
  "10:11"
  "12:30PM"
  "8am"
  
They will all be parsed into a date/time object before the model is saved.
If the date/time has been set to an invalid string, eg "Meow", an error is added to the model.
Example (using Person as defined above):
 
  p = Person.new
  p.date_of_birth = "1 Jan 2006"
  p.time_of_birth = "5am"
  p.save  # true
  
  p.date_of_birth = "30 Feb 2006"
  p.save  # false, 30 feb is invalid for obvious reasons
   
  p.date_of_birth = "java is better than ruby"
  p.save  # false
  
In the final example, as I'm sure you are aware, the record failed to save not only
because "java is better than ruby" is an invalid date, but more importantly, because the statement is blatantly false. ;) 

You can also restrict the given date to a particular range. Pass either a Date object, or a Proc which returns a Date. Eg:

  class Person
    validates_date :date_of_birth, :after => Date.new(1900, 1, 1), :before => Proc.new { 1.day.from_now.to_date }
  end
  
  p = Person.new
  p.date_of_birth = '1800-01-01'
  p.save  # false
  
  p.date_of_birth = Date.new(2001, 1, 1)
  p.save  # true
  
  p.date_of_birth = '2005-03-02'
  p.save  # true
  
You can customise the error messages for dates which fall outside the acceptable range. The boundary date will be substituted in for %s. Eg:

  class Person
    validates_date :date_of_birth, :after => Date.new(1900, 1, 1), :before => Proc.new { 1.day.from_now.to_date }, :before_message => 'Ensure it is before %s', :after_message => 'Ensure it is before %s'
  end
 
Suggestions, comments, problems are all welcome. You'll find me at jonathan.viney@gmail.com

Credits
--

  Masato Tezuka: suggestions and patches.
  

Todo
--

  - Should time validation accept seconds? I don't need support for that so that's why it's not there at the moment.
  - Option to require a four digit year, no guessing from a 2 digit one.
  - Date and time together (?), strings such as "1 Jan 06 5pm". A bit trickier...
